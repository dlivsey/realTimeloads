Output <- do.call(rbind,zlist)
View(Output)
unique(Output$Site_number)
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Import_EAGLE_IO_csv_data.R")
Sonde <- do.call(rbind,zlist)
# Check if any new data was imported if rds file present
if (length(Height_m)==length(time)) {
if (file.exists(fileRDS[grepl('Height.rds',fileRDS)])) {
Ho <- readRDS(fileRDS[grepl('Height.rds',fileRDS)])
inew <- !is.element(Ho$time,Height$time)
Output <- rbind(Height,Ho[inew,]) # combine
Output <- Output[order(Output$time),] # order time
Output <- Output[!duplicated(Output[,c('time')]),] # remove duplicate time
Height <- Output
}
saveRDS(Height,paste0(Sonde_and_Height_folder,"/Height.rds"))
}
# save to RDS
saveRDS(Sonde,paste0(Sonde_and_Height_folder,"/Sonde.rds"))
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Import_EAGLE_IO_csv_data.R")
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Import_EAGLE_IO_csv_data.R")
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Import_EAGLE_IO_csv_data.R")
Import_EAGLE_IO_csv_data(user_data_folder,site=NULL)
Sediment_Samples <- readRDS("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data/JRI/Analyte_data/Sediment_Samples.rds")
View(Sediment_Samples)
user_data_folder <- "C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data"
site <- "JRI" # Mullgrave River at Deeral
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
all_site_folders <- list.dirs(user_data_folder,recursive = "FALSE")
# get specific site folder if site is provided
if (!is.null(site)) {
all_site_folders <- all_site_folders[grepl(site,all_site_folders)]
}
number_of_sites <- length(all_site_folders)
Site_List <- readRDS(paste0(user_data_folder,'/Site_List.rds'))
number_of_sites
folder <- get_folders(all_site_folders[k])
allADCP <- readRDS(paste0(folder$ADCP,'/All_ADCP_Programming_Data.rds'))
folder <- get_folders(all_site_folders[k])
k<-1
folder <- get_folders(all_site_folders[k])
allADCP <- readRDS(paste0(folder$ADCP,'/All_ADCP_Programming_Data.rds'))
# load imputed files if present, otherwise load original data files
if (file.exists(paste0(folder$Sonde_and_Height,'/Height_Imputed.rds'))) {
Height <- readRDS(paste0(folder$Sonde_and_Height,'/Height_Imputed.rds'))$Imputed_data
}
if (!file.exists(paste0(folder$Sonde_and_Height,'/Height_Imputed.rds'))) {
Height <- readRDS(paste0(folder$Sonde_and_Height,'/Height.rds'))
}
# load imputed files if present
if (file.exists(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))) {
Sonde <- readRDS(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))$Imputed_data
}
if (!file.exists(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))) {
Sonde <- readRDS(paste0(folder$Sonde_and_Height,'/Sonde.rds'))
}
# Format Sonde data frame for acoustic_backscatter_processing()
# set sonde temp to 25 b/c "Conductance" from Eagle IO is actually specific conductance relative to 25 deg C
colnames(Sonde)["Specific_conductance_uS_per_cm_at_25_deg_C"==colnames(Sonde)] <- "Conductivity_uS_per_cm" # Real Time Loads expects "Conductivity_uS_per_cm"
Sonde$Water_Temperature_degC <- 25
Sonde$Pressure_dBar <- 0 # Sondes are usually in cells, dbar is just used for computation of salinity.
files <- list.files(path = folder$ADCP, pattern = "*\\.000", recursive = TRUE,full.names = TRUE,include.dirs = TRUE)
files <- gsub('.000','.rds',files)
z000 <- readRDS(files[i])
i
df <- z000$data[[1]]
df$time
# list and no mean_sediment_corrected_backscatter_beam_1_dB computed
c1 <- typeof(df)=="list" & !is.element('mean_sediment_corrected_backscatter_beam_1_dB',colnames(df))
# list and  overwrite == TRUE
c2 <- typeof(df)=="list" & overwrite==TRUE
print(paste(paste(paste('Processing file',i),'of'),length(files)))
print(files[i])
# pre-allocate variables
df$mean_sediment_corrected_backscatter_beam_1_dB <- NA
df$mean_sediment_corrected_backscatter_beam_2_dB <- NA
df$attenuation_of_sound_due_to_sediment_beam_1_dB_per_m <- NA
df$attenuation_of_sound_due_to_sediment_beam_2_dB_per_m <- NA
number_of_sites
# pre-allocate variables
df$mean_sediment_corrected_backscatter_beam_1_dB <- NA
df$mean_sediment_corrected_backscatter_beam_2_dB <- NA
df$attenuation_of_sound_due_to_sediment_beam_1_dB_per_m <- NA
df$attenuation_of_sound_due_to_sediment_beam_2_dB_per_m <- NA
# check for change in cell settings within the 000 file data
#acoustic_backscatter_processing requires Blanking_distance_m, Number_of_Cells, and
#Bin_Size_m to be constant
z2 <- unique(df[c("Blanking_distance_m","Number_of_Cells","Bin_Size_m","Instrument_serial_number","CPU_serial_number")])
ind <- list() # indices of unique cell settings in df
# process data in blocks identified in z2
for (j in 1:nrow(z2)) {
ind[[j]] <- df$Blanking_distance_m==z2$Blanking_distance_m[j] & df$Number_of_Cells==z2$Number_of_Cells[j] & df$Bin_Size_m==z2$Bin_Size_m[j]
# ADCP data frame for acoustic_backscatter_processing()
ADCP <- df[ind[[j]],]
# 2004 is default time of ADCP do not run block if before 2006
if (max(ADCP$time)>"2006-01-01 00:00:00 AEST") {
# Format Echo Instensity to dataframe for realTimeloads
EIa <- data.frame(ADCP$Site_number,ADCP$time,do.call(rbind,ADCP$Echo_Intensity_Beam_1))
EIb <- data.frame(ADCP$Site_number,ADCP$time,do.call(rbind,ADCP$Echo_Intensity_Beam_2))
colnames(EIa)[1]<-'Site_number'
colnames(EIb)[1]<-'Site_number'
colnames(EIa)[2]<-'time'
colnames(EIb)[2]<-'time'
colnames(EIa)[grepl('X',colnames(EIa))] <- gsub('X','Echo_Intensity_Counts_cell_',colnames(EIa)[grepl('X',colnames(EIa))])
colnames(EIb)[grepl('X',colnames(EIb))] <- gsub('X','Echo_Intensity_Counts_cell_',colnames(EIb)[grepl('X',colnames(EIb))])
# get all data recorded by specific adcp and check for any ambient noise level data to estimate Instrument Noise Level, Instrument Noise Level is used if no ambient noise level data are available in 000 file
ab1 <- allADCP[is.element(allADCP$Site_number,ADCP$Site_number)&is.element(allADCP$Instrument_serial_number,ADCP$Instrument_serial_number)&is.element(allADCP$CPU_serial_number,ADCP$CPU_serial_number),"Ambient_Noise_Level_Beam_1_Counts"]
ab2 <- allADCP[is.element(allADCP$Site_number,ADCP$Site_number)&is.element(allADCP$Instrument_serial_number,ADCP$Instrument_serial_number)&is.element(allADCP$CPU_serial_number,ADCP$CPU_serial_number),"Ambient_Noise_Level_Beam_1_Counts"]
if (sum(is.finite(ab1))==0 & sum(is.finite(ab2))==0) {
#See Table 2 of https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2016WR019695 # for ambient noise level of 1200, 600, and 300 kHz RDI ADCP
# ambient noise level for RDI ADCP in Table 2 row "NL by Record Minimum (Counts)" ranges from ~ 30 to 40, setting nominal Instrument_Noise_Level to 35 counts if no ambient noise level data are available
Instrument_Noise_Level <- 35 # Counts,
}
if (sum(is.finite(ab1))>0 | sum(is.finite(ab2))>0) {
# if any ambient noise level data are present set Instrument_Noise_Level to min value of all available data assuming that lowest ambient noise level measurments is nearest to actual Instrument_Noise_Level
Instrument_Noise_Level <- min(rbind(ab1,ab2),na.rm = TRUE) # Counts,
}
# Format site dataframe for realTimeloads
# note b/c ADCP data have ADCP$Range_to_bed_of_acoustic_beams_m and ADCP$Range_to_bed_of_acoustic_beams_m and ADCP$Range_to_water_surface_of_acoustic_beams_m, data in Site is not used in acoustic_backscatter_processing() but is needed to ensure acoustic_backscatter_processing() still runs
Site_number <- ADCP$Site_number[1]
ADCP_elevation_above_gauge_datum_m <- ADCP$ADCP_elevation_above_gauge_datum_m[1]
Distance_of_gauge_datum_below_thalweg_m <- mean(ADCP$Thalweg_relative_to_gauge_datum_m)
ADCP_elevation_above_bed_m <- ADCP$ADCP_elevation_above_gauge_datum_m[1]-Distance_of_gauge_datum_below_thalweg_m
Site <- data.frame(Site_number,ADCP_elevation_above_bed_m,Distance_of_gauge_datum_below_thalweg_m,ADCP_elevation_above_gauge_datum_m)
Output <- realTimeloads::acoustic_backscatter_processing(
Site,
ADCP,
Height,
Sonde,
Echo_Intensity_Beam_1 = EIa,
Echo_Intensity_Beam_2 = EIb,
Instrument_Noise_Level,
Include_Rayleigh = TRUE,
Include_near_field_correction = TRUE
)
# Store processed backcatter data to df of RDS file
df$mean_sediment_corrected_backscatter_beam_1_dB[ind[[j]]] <- Output$mean_sediment_corrected_backscatter_beam_1_dB
df$mean_sediment_corrected_backscatter_beam_2_dB[ind[[j]]] <- Output$mean_sediment_corrected_backscatter_beam_2_dB
df$attenuation_of_sound_due_to_sediment_beam_1_dB_per_m[ind[[j]]] <- Output$attenuation_of_sound_due_to_sediment_beam_1_dB_per_m
df$attenuation_of_sound_due_to_sediment_beam_2_dB_per_m[ind[[j]]] <- Output$attenuation_of_sound_due_to_sediment_beam_2_dB_per_m
}
} # j blocks
ind[[j]] <- df$Blanking_distance_m==z2$Blanking_distance_m[j] & df$Number_of_Cells==z2$Number_of_Cells[j] & df$Bin_Size_m==z2$Bin_Size_m[j]
# ADCP data frame for acoustic_backscatter_processing()
ADCP <- df[ind[[j]],]
ADCP
# Format Echo Instensity to dataframe for realTimeloads
EIa <- data.frame(ADCP$Site_number,ADCP$time,do.call(rbind,ADCP$Echo_Intensity_Beam_1))
EIb <- data.frame(ADCP$Site_number,ADCP$time,do.call(rbind,ADCP$Echo_Intensity_Beam_2))
colnames(EIa)[1]<-'Site_number'
colnames(EIb)[1]<-'Site_number'
colnames(EIa)[2]<-'time'
colnames(EIb)[2]<-'time'
colnames(EIa)[grepl('X',colnames(EIa))] <- gsub('X','Echo_Intensity_Counts_cell_',colnames(EIa)[grepl('X',colnames(EIa))])
colnames(EIb)[grepl('X',colnames(EIb))] <- gsub('X','Echo_Intensity_Counts_cell_',colnames(EIb)[grepl('X',colnames(EIb))])
# get all data recorded by specific adcp and check for any ambient noise level data to estimate Instrument Noise Level, Instrument Noise Level is used if no ambient noise level data are available in 000 file
ab1 <- allADCP[is.element(allADCP$Site_number,ADCP$Site_number)&is.element(allADCP$Instrument_serial_number,ADCP$Instrument_serial_number)&is.element(allADCP$CPU_serial_number,ADCP$CPU_serial_number),"Ambient_Noise_Level_Beam_1_Counts"]
ab2 <- allADCP[is.element(allADCP$Site_number,ADCP$Site_number)&is.element(allADCP$Instrument_serial_number,ADCP$Instrument_serial_number)&is.element(allADCP$CPU_serial_number,ADCP$CPU_serial_number),"Ambient_Noise_Level_Beam_1_Counts"]
if (sum(is.finite(ab1))==0 & sum(is.finite(ab2))==0) {
#See Table 2 of https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2016WR019695 # for ambient noise level of 1200, 600, and 300 kHz RDI ADCP
# ambient noise level for RDI ADCP in Table 2 row "NL by Record Minimum (Counts)" ranges from ~ 30 to 40, setting nominal Instrument_Noise_Level to 35 counts if no ambient noise level data are available
Instrument_Noise_Level <- 35 # Counts,
}
if (sum(is.finite(ab1))>0 | sum(is.finite(ab2))>0) {
# if any ambient noise level data are present set Instrument_Noise_Level to min value of all available data assuming that lowest ambient noise level measurments is nearest to actual Instrument_Noise_Level
Instrument_Noise_Level <- min(rbind(ab1,ab2),na.rm = TRUE) # Counts,
}
# Format site dataframe for realTimeloads
# note b/c ADCP data have ADCP$Range_to_bed_of_acoustic_beams_m and ADCP$Range_to_bed_of_acoustic_beams_m and ADCP$Range_to_water_surface_of_acoustic_beams_m, data in Site is not used in acoustic_backscatter_processing() but is needed to ensure acoustic_backscatter_processing() still runs
Site_number <- ADCP$Site_number[1]
ADCP_elevation_above_gauge_datum_m <- ADCP$ADCP_elevation_above_gauge_datum_m[1]
Distance_of_gauge_datum_below_thalweg_m <- mean(ADCP$Thalweg_relative_to_gauge_datum_m)
ADCP_elevation_above_bed_m <- ADCP$ADCP_elevation_above_gauge_datum_m[1]-Distance_of_gauge_datum_below_thalweg_m
Site <- data.frame(Site_number,ADCP_elevation_above_bed_m,Distance_of_gauge_datum_below_thalweg_m,ADCP_elevation_above_gauge_datum_m)
Output <- realTimeloads::acoustic_backscatter_processing(
Site,
ADCP,
Height,
Sonde,
Echo_Intensity_Beam_1 = EIa,
Echo_Intensity_Beam_2 = EIb,
Instrument_Noise_Level,
Include_Rayleigh = TRUE,
Include_near_field_correction = TRUE
)
View(Output)
Sonde
length(unique(Sonde$Site_number))
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
JRIs
sum(grepl("1120054",Sonde$Site_number))
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
grepl("1120053",Sonde$Site_number)
zdf1 <- Sonde[Sonde$time>JRIs & grepl("1120053",Sonde$Site_number),]
unique(zdf1)
unique(zdf1$Site_number)
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
unique(Sonde$Site_number)
# load imputed files if present
if (file.exists(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))) {
Sonde <- readRDS(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))$Imputed_data
}
if (!file.exists(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))) {
Sonde <- readRDS(paste0(folder$Sonde_and_Height,'/Sonde.rds'))
}
# Format Sonde data frame for acoustic_backscatter_processing()
# set sonde temp to 25 b/c "Conductance" from Eagle IO is actually specific conductance relative to 25 deg C
colnames(Sonde)["Specific_conductance_uS_per_cm_at_25_deg_C"==colnames(Sonde)] <- "Conductivity_uS_per_cm" # Real Time Loads expects "Conductivity_uS_per_cm"
Sonde$Water_Temperature_degC <- 25
Sonde$Pressure_dBar <- 0 # Sondes are usually in cells, dbar is just used for computation of salinity.
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
zdf<-Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),]
unique(zdf$Site_number)
zdf<-Sonde[Sonde$time<JRIs,]
unique(zdf$Site_number)
Sonde$Site_number
grepl('1120053',Sonde$Site_number)
grepl('1120053',unique(Sonde$Site_number)
)
grepl(unique(Sonde$Site_number),'1120053')
grepl('1120053',unique(Sonde$Site_number)
)
sum(grepl('1120053',unique(Sonde$Site_number)))
# at JRI Sonde contains data from JRI and JRC, prefer JRI when available
if (length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1) {
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
}
length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1
# load imputed files if present
if (file.exists(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))) {
Sonde <- readRDS(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))$Imputed_data
}
if (!file.exists(paste0(folder$Sonde_and_Height,'/Sonde_Imputed.rds'))) {
Sonde <- readRDS(paste0(folder$Sonde_and_Height,'/Sonde.rds'))
}
# Format Sonde data frame for acoustic_backscatter_processing()
# set sonde temp to 25 b/c "Conductance" from Eagle IO is actually specific conductance relative to 25 deg C
colnames(Sonde)["Specific_conductance_uS_per_cm_at_25_deg_C"==colnames(Sonde)] <- "Conductivity_uS_per_cm" # Real Time Loads expects "Conductivity_uS_per_cm"
Sonde$Water_Temperature_degC <- 25
Sonde$Pressure_dBar <- 0 # Sondes are usually in cells, dbar is just used for computation of salinity.
# at JRI Sonde contains data from JRI and JRC, prefer JRI when available
if (length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1) {
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
}
if (length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1) {
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
}
if (length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1) {
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
}
if (length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1) {
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
}
if (length(unique(Sonde$Site_number))>1 & sum(grepl('1120053',unique(Sonde$Site_number)))==1) {
JRIs <- min(Sonde$time[grepl("1120053",Sonde$Site_number)])
Sonde <- rbind(Sonde[Sonde$time<JRIs,],Sonde[Sonde$time>=JRIs & grepl("1120053",Sonde$Site_number),])
}
min(Sonde$time)
max(Sonde$time)
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
user_data_folder <- "C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data"
site <- 'JRI'
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
Process_Backscatter(user_data_folder,site,overwrite = TRUE)
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
Process_Backscatter(user_data_folder,site,overwrite = TRUE)
warnings()
z<-> warnings()
z<- warnings()
z
source("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/Process_Backscatter.R")
#setwd("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard")
#user_data_folder <- "C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data"
#site <- 'MRD'
from_time <- as.POSIXct("2017-07-01 00:00:00 AEST")
to_time <- as.POSIXct("2023-09-01 00:00:00 AEST")
ti <- seq(from_time,from_time+60*60*24*100,by = "10 min") # use 100 days for testing
#setwd("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard")
#user_data_folder <- "C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data"
#site <- 'MRD'
from_time <- as.POSIXct("2017-07-01 00:00:00 AEST")
to_time <- as.POSIXct("2023-09-01 00:00:00 AEST")
### uniform timestep for imputation ----
ti <- seq(from_time,to_time,by = "10 min")
Sonde <- readRDS(paste0(paste0(user_data_folder,paste0('/',site)),"/Sonde_and_Height_data/Sonde.rds"))
### Check time in imputed sonde file if present ----
days_since_last_S_imputation <- Inf
imputed_Sonde_file <- paste0(paste0(user_data_folder,paste0('/',site)),"/Sonde_and_Height_data/Sonde_Imputed.rds")
imputed_Height_file <- paste0(paste0(user_data_folder,paste0('/',site)),"/Sonde_and_Height_data/Height_Imputed.rds")
days_since_last_S_imputation
t <- Sonde$time
# "Conductivity_uS_per_cm" on Eagle IO is actually Specific Conductance us/cm @ 25 deg C
SpC <- Sonde$Conductivity_uS_per_cm
SpC[SpC<0] <- NA
# use non-tidal stage and lagged dHdt as surrogate for velocity
Height_Imputed <- readRDS(imputed_Height_file)$Imputed_data
# Height interpolated to ti
Hi <- linear_interpolation_with_time_limit(Height_Imputed$time,Height_Imputed$Height_m,ti,2)$x_interpolated
# Non-tidal stage using USGS butterworth
readings_per_hour <- round(60/as.double(difftime(ti[2],ti[1],'mins')))
Hnt <- butterworth_tidal_filter(ti,Hi)
Hnt <- imputeTS::na_ma(Hnt, k = readings_per_hour*24,weighting = "simple") # fill gaps at start and end of record
dHdt <- c(NA,diff(Hi))
dHdt[1] <- dHdt[2]
dHdt_lagged <-data.table::shift(dHdt, n = c(3,6,9), fill=NA, type="lag", give.names=TRUE)
dHdt_lagged <- data.frame(dHdt_lagged)
for (j in 1:length(dHdt_lagged)) {
dHdt_lagged[,j] <- imputeTS::na_ma(dHdt_lagged[,j],weighting = 'simple')
}
unique(Sonde$Site_number)
(length(unique(Sonde$Site_number))==1)
grepl(Sonde$Site_number)
grepl(Sonde$Site_number[1],Sonde$Site_number)
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
max(Sonde$time[ind])
max(Sonde$time[!ind])
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
max(Sonde$time[ind])
min(Sonde$time[ind])
View(Sonde)
Sonde <- readRDS("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data/JRI/Sonde_and_Height_data/Sonde.rds")
max(Sonde$time[ind])
max(Sonde$time)
Output_1 <- realTimeloads::impute_data(t=t[ind],x=log10(SpC[ind]),ti=ti[ti<=max(Sonde$time[ind])],Xreg=cbind(Hnt[ind],dHdt_lagged[ind,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
Hnt <- butterworth_tidal_filter(ti,Hi)
library(realTimeloads)
t <- Sonde$time
# "Conductivity_uS_per_cm" on Eagle IO is actually Specific Conductance us/cm @ 25 deg C
SpC <- Sonde$Conductivity_uS_per_cm
SpC[SpC<0] <- NA
# use non-tidal stage and lagged dHdt as surrogate for velocity
Height_Imputed <- readRDS(imputed_Height_file)$Imputed_data
# Height interpolated to ti
Hi <- linear_interpolation_with_time_limit(Height_Imputed$time,Height_Imputed$Height_m,ti,2)$x_interpolated
# Non-tidal stage using USGS butterworth
readings_per_hour <- round(60/as.double(difftime(ti[2],ti[1],'mins')))
Hnt <- butterworth_tidal_filter(ti,Hi)
Hnt <- imputeTS::na_ma(Hnt, k = readings_per_hour*24,weighting = "simple") # fill gaps at start and end of record
dHdt <- c(NA,diff(Hi))
dHdt[1] <- dHdt[2]
dHdt_lagged <-data.table::shift(dHdt, n = c(3,6,9), fill=NA, type="lag", give.names=TRUE)
dHdt_lagged <- data.frame(dHdt_lagged)
for (j in 1:length(dHdt_lagged)) {
dHdt_lagged[,j] <- imputeTS::na_ma(dHdt_lagged[,j],weighting = 'simple')
}
if (length(unique(Sonde$Site_number))==1) {
# took log10(SpC) given possible range from 0  to 50,000
Output <- realTimeloads::impute_data(t=t,x=log10(SpC),ti=ti,Xreg=cbind(Hnt,dHdt_lagged),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
}
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
Output_1 <- realTimeloads::impute_data(t=t[ind],x=log10(SpC[ind]),ti=ti[ti<=max(Sonde$time[ind])],Xreg=cbind(Hnt[ind],dHdt_lagged[ind,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
Output_1 <- realTimeloads::impute_data(t=t[ind],x=log10(SpC[ind]),ti=ti[ind2],Xreg=cbind(Hnt[ind2],dHdt_lagged[ind2,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
ind2 <- ti<=max(Sonde$time[ind])
Output_1 <- realTimeloads::impute_data(t=t[ind],x=log10(SpC[ind]),ti=ti[ind2],Xreg=cbind(Hnt[ind2],dHdt_lagged[ind2,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
Output_2 <- realTimeloads::impute_data(t=t[!ind],x=log10(SpC[!ind]),ti=ti[!ind2],Xreg=cbind(Hnt[!ind2],dHdt_lagged[!ind2,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
t[!ind]
min(v)
min(t[!ind])
max(t[!ind])
z<-t[!ind]
sum(ind)
sum(!ind)
Output_2 <- realTimeloads::impute_data(t=t[!ind],x=log10(SpC[!ind]),ti=ti[!ind2],Xreg=cbind(Hnt[!ind2],dHdt_lagged[!ind2,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
min(log10(SpC[!ind]))
log10(SpC[!ind]))
log10(SpC[!ind])
min(log10(SpC[!ind]))
sum(ind2)
sum(!ind2)
Output_1 <- realTimeloads::impute_data(t=t[ind],x=log10(SpC[ind]),ti=ti,Xreg=cbind(Hnt,dHdt_lagged),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
Output_2 <- realTimeloads::impute_data(t=t[!ind],x=log10(SpC[!ind]),ti=ti,Xreg=cbind(Hnt,dHdt_lagged),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
=max(Sonde$time[ind])
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
ind2 <- ti<=max(Sonde$time[ind])
=max(Sonde$time[ind])
max(Sonde$time[ind])
min(Sonde$time[ind])
Sonde$Site_number[1]
View(Sonde)
Sonde$Site_number[1]
Sonde <- Sonde[order(Sonde$time),]  # order time at site
View(Sonde)
Sonde$Site_number[1]
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
ind2 <- ti<=max(Sonde$time[ind])
length(t[ind])
length(t[@ind])
length(t[!ind])
ind2 <- ti<=max(Sonde$time[ind])
ind2
sum(ind2)
max(ti[ind2])
min(ti[ind2])
max(ti[!ind2])
max(ti)
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
ind2 <- ti<=max(Sonde$time[ind])
min(Sonde$time[ind])
max(Sonde$time[ind])
Sonde$Site_number[1]
min(Sonde$time[!ind])
max(Sonde$time[!ind])
plot(Sonde$time,Sonde$Site_number)
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
ind2 <- ti<=min(Sonde$time[!ind])
min(ti[ind2])
min(ti[!ind2])
min(Sonde$time[ind])
min(Sonde$time[!ind])
ind2 <- ti>=min(Sonde$time[!ind])
min(ti[ind2])
max(ti[ind2])
min(t[!ind])
ind <- grepl(Sonde$Site_number[1],Sonde$Site_number)
min(t[!ind])
unique(Sonde$Site_number)
min(Sonde$time[grepl("1120054",Sonde$Site_number)])
min(Sonde$time[grepl("1120053",Sonde$Site_number)])
min(Sonde$time[ind])
min(Sonde$time[!ind])
ind2 <- ti>=min(Sonde$time[!ind])
min(ti[ind2])
Output_2 <- realTimeloads::impute_data(t=t[!ind],x=log10(SpC[!ind]),ti=ti[ind2],Xreg=cbind(Hnt[ind2],dHdt_lagged[ind2]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
Output_2 <- realTimeloads::impute_data(t=t[!ind],x=log10(SpC[!ind]),ti=ti[ind2],Xreg=cbind(Hnt[ind2],dHdt_lagged[ind2,]),harmonic = TRUE,MC=1) # no uncertainty in Specific Conductance needed at this time, setting MC to 1 to speed-up code
View(Output_1)
View(Output_2)
View(Output_1)
View(Output_2)
Output<- list()
Output$Imputed_data <- rbind(Output_1$Imputed_data,Output_2$Imputed_data)
View(Output)
View(Output_1)
View(Output_2)
df1<- data.frame(Output_1$Imputed_data)
df1<- data.frame(Output_1$Imputed_data)
df1$Site_number <-
Output$Imputed_data <- rbind(,Output_2$Imputed_data)
df1$Site_number <- unique(Sonde$Site_number[ind])
Output<- list()
df1<- data.frame(Output_1$Imputed_data)
df1$Site_number <- unique(Sonde$Site_number[ind])
df2<- data.frame(Output_2$Imputed_data)
df2$Site_number <- unique(Sonde$Site_number[!ind])
Output$Imputed_data <- rbind(df1,df2)
View(Output)
names(Output_1)
Output$Validation_statistics_1 <- Output_1$Validation_statistics
Output$Validation_statistics_1$Site_number <- unique(Sonde$Site_number[ind])
Output$Validation_statistics_2$Site_number <- unique(Sonde$Site_number[!ind])
View(Output)
Output$Validation_statistics_2 <- Output_2$Validation_statistics
Output$Validation_statistics_2$Site_number <- unique(Sonde$Site_number[!ind])
View(Output)
Output$predictors <- Output_1$predictors
Output$imputation_code <- Output_1$imputation_code
# transform back to linear units
Output$Imputed_data$Specific_conductance_uS_per_cm_at_25_deg_C <- 10^Output$Imputed_data$Specific_conductance_uS_per_cm_at_25_deg_C
# "Conductivity_uS_per_cm" on Eagle IO is actually Specific Conductance us/cm @ 25 deg C
colnames(Output$Imputed_data)<-gsub('x_at','Specific_conductance_uS_per_cm_at_25_deg_C_at',colnames(Output$Imputed_data))
colnames(Output$Imputed_data)<-gsub('x_imputed','Specific_conductance_uS_per_cm_at_25_deg_C',colnames(Output$Imputed_data))
# "Conductivity_uS_per_cm" on Eagle IO is actually Specific Conductance us/cm @ 25 deg C
colnames(Output$Imputed_data)<-gsub('x_at','Specific_conductance_uS_per_cm_at_25_deg_C_at',colnames(Output$Imputed_data))
colnames(Output$Imputed_data)<-gsub('x_imputed','Specific_conductance_uS_per_cm_at_25_deg_C',colnames(Output$Imputed_data))
# transform back to linear units
Output$Imputed_data$Specific_conductance_uS_per_cm_at_25_deg_C <- 10^Output$Imputed_data$Specific_conductance_uS_per_cm_at_25_deg_C
# remove uncertainty columns w/ no data
Output$Imputed_data <- Output$Imputed_data[,!grepl('C_at_',colnames(Output$Imputed_data))]
imputed_Sonde_file
saveRDS(Output,imputed_Sonde_file)
iSo <- readRDS(imputed_Sonde_file)
zlist <- list()
z<-rbind(iSo$Imputed_data,Output$Imputed_data)  # combine
zsites <- unique(z$Site_number)
zsites
unique(Sonde$Site_number)
zlist <- list()
z<-rbind(iSo$Imputed_data,Output$Imputed_data)  # combine
zsites <- unique(z$Site_number)
for (j in 1:length(zsites)) {
zlist[[j]] <- z[grepl(zsites[j],z$Site_number),]
zlist[[j]] <- zlist[[j]][!duplicated( zlist[[j]][,c('time')]),] # remove duplicate time at site
zlist[[j]] <- zlist[[j]][order(zlist[[j]]$time),]  # order time at site
}
Output$Imputed_data <- do.call(rbind,zlist)
View(Output)
saveRDS(Output,imputed_Sonde_file)
plot(Output_2$Imputed_data$Specific_conductance_uS_per_cm_at_25_deg_C)
plot(Output_2$Imputed_data$x_imputed)
plot(10^Output_2$Imputed_data$x_imputed)
plot(t,SpC)
max(SpC[!ind])
max(SpC[!ind],na.rm = T)
max(SpC[ind],na.rm = T)
plot(t,SpC,ylim = c(30000,70000))
plot(t,SpC,ylim = c(30000,62000))
plot(t,SpC)
points(Output_2$Imputed_data$time,Output_2$Imputed_data$x_imputed)
points(Output_2$Imputed_data$time,Output_2$Imputed_data$x_imputed,col='red')
plot(Output_2$Imputed_data$time,Output_2$Imputed_data$x_imputed,col='red')
plot(t,SpC)
points(10^Output_2$Imputed_data$time,Output_2$Imputed_data$x_imputed,col='red')
points(Output_2$Imputed_data$time,10^Output_2$Imputed_data$x_imputed,col='red')
plot(Output_2$Imputed_data$time,Output_2$Imputed_data$x_imputed,col='red')
10^0
